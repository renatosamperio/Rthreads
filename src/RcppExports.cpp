// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// trunc_num
double trunc_num(double x, double precision, bool debug);
RcppExport SEXP _rparalelism_trunc_num(SEXP xSEXP, SEXP precisionSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(trunc_num(x, precision, debug));
    return rcpp_result_gen;
END_RCPP
}
// oneParallelSum
double oneParallelSum(Rcpp::NumericVector& v);
RcppExport SEXP _rparalelism_oneParallelSum(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(oneParallelSum(v));
    return rcpp_result_gen;
END_RCPP
}
// oneParallelSumChunked
double oneParallelSumChunked(std::vector<double>& v, int num_cores);
RcppExport SEXP _rparalelism_oneParallelSumChunked(SEXP vSEXP, SEXP num_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type num_cores(num_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(oneParallelSumChunked(v, num_cores));
    return rcpp_result_gen;
END_RCPP
}
// oneParallelSumDeterministic
double oneParallelSumDeterministic(std::vector<double>& v, int num_cores);
RcppExport SEXP _rparalelism_oneParallelSumDeterministic(SEXP vSEXP, SEXP num_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type num_cores(num_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(oneParallelSumDeterministic(v, num_cores));
    return rcpp_result_gen;
END_RCPP
}
// rcppParallelSum
double rcppParallelSum(Rcpp::NumericVector& v);
RcppExport SEXP _rparalelism_rcppParallelSum(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppParallelSum(v));
    return rcpp_result_gen;
END_RCPP
}
// sum_parallel
double sum_parallel(std::vector<double>& vec, int num_cores);
RcppExport SEXP _rparalelism_sum_parallel(SEXP vecSEXP, SEXP num_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type num_cores(num_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_parallel(vec, num_cores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rparalelism_trunc_num", (DL_FUNC) &_rparalelism_trunc_num, 3},
    {"_rparalelism_oneParallelSum", (DL_FUNC) &_rparalelism_oneParallelSum, 1},
    {"_rparalelism_oneParallelSumChunked", (DL_FUNC) &_rparalelism_oneParallelSumChunked, 2},
    {"_rparalelism_oneParallelSumDeterministic", (DL_FUNC) &_rparalelism_oneParallelSumDeterministic, 2},
    {"_rparalelism_rcppParallelSum", (DL_FUNC) &_rparalelism_rcppParallelSum, 1},
    {"_rparalelism_sum_parallel", (DL_FUNC) &_rparalelism_sum_parallel, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rparalelism(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
